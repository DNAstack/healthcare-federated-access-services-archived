// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/scim/v2/users.proto

// Package scim provides protocol buffer versions of the SCIM 2.0 User objects
// and related operations, allowing endpoints to receive requests and return
// responses using these messages.
// Core Schema: https://tools.ietf.org/html/rfc7643
// Protocol: https://tools.ietf.org/html/rfc7644

package v2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SCIM representation of a 'User' as per
// https://tools.ietf.org/html/rfc7643#section-4.1
type User struct {
	// The schemas attribute is an array of Strings which allows introspection of
	// the supported schema version for a SCIM representation as well any schema
	// extensions supported by that representation. Each String value must be a
	// unique URI. This specification defines URIs for User, Group, and a standard
	// "enterprise" extension. All representations of SCIM schema MUST include a
	// non-zero value array with value(s) of the URIs supported by that
	// representation. Duplicate values MUST NOT be included. Value order is not
	// specified and MUST not impact behavior. REQUIRED.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// Unique identifier for the SCIM Resource as defined by the Service Provider.
	// This is returned when the resource is created.
	// Each representation of the Resource MUST include a non-empty id value. This
	// identifier MUST be unique across the Service Provider's entire set of
	// Resources. It MUST be a stable, non-reassignable identifier that does not
	// change when the same Resource is returned in subsequent requests. The value
	// of the id attribute is always issued by the Service Provider and MUST never
	// be specified by the Service Consumer. bulkId: is a reserved keyword and
	// MUST NOT be used in the unique identifier. REQUIRED and READ-ONLY.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// An identifier for the Resource as defined by the Service Consumer. The
	// externalId may simplify identification of the Resource between Service
	// Consumer and Service provider by allowing the Consumer to refer to the
	// Resource with its own identifier, obviating the need to store a local
	// mapping between the local identifier of the Resource and the identifier
	// used by the Service Provider. Each Resource MAY include a non-empty
	// externalId value. The value of the externalId attribute is always issued be
	// the Service Consumer and can never be specified by the Service Provider.
	// The Service Provider MUST always interpret the externalId as scoped to the
	// Service Consumer's tenant.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// A complex attribute containing resource metadata. All sub-attributes are
	// OPTIONAL.
	Meta *ResourceMetadata `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	// Unique identifier for the User, typically used by the user to directly
	// authenticate to the service provider. Often displayed to the user
	// as their unique identifier within the system (as opposed to id or
	// externalId, which are generally opaque and not user-friendly identifiers).
	// Each User MUST include a non-empty userName value. This identifier MUST be
	// unique across the Service Consumer's entire set of Users. REQUIRED.
	UserName string `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// The components of the User's real name. Providers MAY return just the full
	// name as a single string in the formatted sub-attribute, or they MAY return
	// just the individual component attributes using the other sub-attributes, or
	// they MAY return both. If both variants are returned, they SHOULD be
	// describing the same name, with the formatted name indicating how the
	// component attributes should be combined.
	Name *Name `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the User, suitable for display to end-users.  The name SHOULD
	// be the full name of the User being described, if known.
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The casual way to address the user in real life, e.g., 'Bob' or 'Bobby'
	// instead of 'Robert'.  This attribute SHOULD NOT be used to represent a
	// User's username (e.g., 'bjensen' or 'mpepperidge').
	NickName string `protobuf:"bytes,8,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	// A fully qualified URL to a page representing the User's online profile.
	ProfileUrl string `protobuf:"bytes,9,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"`
	// The user's title, such as "Vice President."
	Title string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	// Used to identify the relationship between the organization and the
	// user.  Typical values used might be "Contractor", "Employee",
	// "Intern", "Temp", "External", and "Unknown", but any value may be
	// used.
	UserType string `protobuf:"bytes,11,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	// Indicates the user's preferred written or spoken languages and is
	// generally used for selecting a localized user interface.  The
	// value indicates the set of natural languages that are preferred.
	// The format of the value is the same as the HTTP Accept-Language
	// header field (not including "Accept-Language:") and is specified
	// in Section 5.3.5 of [RFC7231].  The intent of this value is to
	// enable cloud applications to perform matching of language tags
	// [RFC4647] to the user's language preferences, regardless of what
	// may be indicated by a user agent (which might be shared), or in an
	// interaction that does not involve a user (such as in a delegated
	// OAuth 2.0 [RFC6749] style interaction) where normal HTTP
	// Accept-Language header negotiation cannot take place.
	PreferredLanguage string `protobuf:"bytes,12,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	// Used to indicate the User's default location for purposes of
	// localizing such items as currency, date time format, or numerical
	// representations.  A valid value is a language tag as defined in
	// [RFC5646].  Computer languages are explicitly excluded.
	//
	// A language tag is a sequence of one or more case-insensitive
	// sub-tags, each separated by a hyphen character ("-", %x2D).  For
	// backward compatibility, servers MAY accept tags separated by an
	// underscore character ("_", %x5F).  In most cases, a language tag
	// consists of a primary language sub-tag that identifies a broad
	// family of related languages (e.g., "en" = English) and that is
	// optionally followed by a series of sub-tags that refine or narrow
	// that language's range (e.g., "en-CA" = the variety of English as
	// communicated in Canada).  Whitespace is not allowed within a
	// language tag.  Example tags include:
	//
	//       fr, en-US, es-419, az-Arab, x-pig-latin, man-Nkoo-GN
	//
	//  See [RFC5646] for further information.
	Locale string `protobuf:"bytes,13,opt,name=locale,proto3" json:"locale,omitempty"`
	// The User's time zone, in IANA Time Zone database format [RFC6557],
	// also known as the "Olson" time zone database format [Olson-TZ]
	// (e.g., "America/Los_Angeles").
	Timezone string `protobuf:"bytes,14,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// A Boolean value indicating the User's administrative status. The definitive
	// meaning of this attribute is determined by the Service Provider though a
	// value of true infers the User is, for example, able to login while a value
	// of false implies the User's account has been suspended.
	Active bool `protobuf:"varint,15,opt,name=active,proto3" json:"active,omitempty"`
	// UNUSED but present for completeness.
	Password string `protobuf:"bytes,16,opt,name=password,proto3" json:"password,omitempty"`
	// E-mail addresses for the User. The value SHOULD be canonicalized by the
	// Service Provider, e.g. bjensen@example.com instead of bjensen@EXAMPLE.COM.
	// Canonical Type values of work, home, and other.
	Emails []*Attribute `protobuf:"bytes,17,rep,name=emails,proto3" json:"emails,omitempty"`
	// Phone numbers for the User. The value SHOULD be canonicalized by the
	// Service Provider according to format in RFC3966 e.g. 'tel:+1-201-555-0123'.
	// Canonical Type values of work, home, mobile, fax, pager and other.
	PhoneNumbers []*Attribute `protobuf:"bytes,18,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	// Instant messaging address for the User. No official canonicalization rules
	// exist for all instant messaging addresses, but Service Providers SHOULD,
	// when appropriate, remove all whitespace and convert the address to
	// lowercase. Instead of the standard Canonical Values for type, this
	// attribute defines the following Canonical Values to represent currently
	// popular IM services: gtalk, icq, xmpp, msn, skype, qq.
	Ims []*Attribute `protobuf:"bytes,19,rep,name=ims,proto3" json:"ims,omitempty"`
	// A URI that is a uniform resource locator (as defined in
	// Section 1.1.3 of [RFC3986]) that points to a resource location
	// representing the user's image.  The resource MUST be a file (e.g.,
	// a GIF, JPEG, or PNG image file) rather than a web page containing
	// an image.  Service providers MAY return the same image in
	// different sizes, although it is recognized that no standard for
	// describing images of various sizes currently exists.  Note that
	// this attribute SHOULD NOT be used to send down arbitrary photos
	// taken by this user; instead, profile photos of the user that are
	// suitable for display when describing the user should be sent.
	// Instead of the standard canonical values for type, this attribute
	// defines the following canonical values to represent popular photo
	// sizes: "photo" and "thumbnail".
	Photos []*Attribute `protobuf:"bytes,20,rep,name=photos,proto3" json:"photos,omitempty"`
	// Physical mailing addresses for this User. Canonical Type Values of work,
	// home, and other.
	Addresses []*Address `protobuf:"bytes,21,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// A list of groups to which the user belongs, either through direct
	// membership, through nested groups, or dynamically calculated.
	Groups []*Attribute `protobuf:"bytes,22,rep,name=groups,proto3" json:"groups,omitempty"`
	// A list of entitlements for the user that represent a thing the
	// user has.  An entitlement may be an additional right to a thing,
	// object, or service.  No vocabulary or syntax is specified; service
	// providers and clients are expected to encode sufficient
	// information in the value so as to accurately and without ambiguity
	// determine what the user has access to.  This value has no
	// canonical types, although a type may be useful as a means to scope
	// entitlements.
	Entitlements []*Attribute `protobuf:"bytes,23,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
	// A list of roles for the user that collectively represent who the
	// user is, e.g., "Student", "Faculty".  No vocabulary or syntax is
	// specified, although it is expected that a role value is a String
	// or label representing a collection of entitlements.  This value
	// has no canonical types.
	Roles []*Attribute `protobuf:"bytes,24,rep,name=roles,proto3" json:"roles,omitempty"`
	// A list of certificates associated with the resource (e.g., a
	// User).  Each value contains exactly one DER-encoded X.509
	// certificate (see Section 4 of [RFC5280]), which MUST be base64
	// encoded per Section 4 of [RFC4648].  A single value MUST NOT
	// contain multiple certificates and so does not contain the encoding
	// "SEQUENCE OF Certificate" in any guise.
	X509Certificates []*Attribute `protobuf:"bytes,25,rep,name=x509_certificates,json=x509Certificates,proto3" json:"x509_certificates,omitempty"`
	// Attributes commonly used in representing users that belong to, or act on
	// behalf of a business or enterprise.
	EnterpriseExtension  *EnterpriseUserExtension `protobuf:"bytes,26,opt,name=enterprise_extension,json=urn:ietf:params:scim:schemas:extension:enterprise:2.0:User,proto3" json:"enterprise_extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *User) GetMeta() *ResourceMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *User) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *User) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *User) GetProfileUrl() string {
	if m != nil {
		return m.ProfileUrl
	}
	return ""
}

func (m *User) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *User) GetUserType() string {
	if m != nil {
		return m.UserType
	}
	return ""
}

func (m *User) GetPreferredLanguage() string {
	if m != nil {
		return m.PreferredLanguage
	}
	return ""
}

func (m *User) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *User) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *User) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetEmails() []*Attribute {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *User) GetPhoneNumbers() []*Attribute {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

func (m *User) GetIms() []*Attribute {
	if m != nil {
		return m.Ims
	}
	return nil
}

func (m *User) GetPhotos() []*Attribute {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *User) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *User) GetGroups() []*Attribute {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *User) GetEntitlements() []*Attribute {
	if m != nil {
		return m.Entitlements
	}
	return nil
}

func (m *User) GetRoles() []*Attribute {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *User) GetX509Certificates() []*Attribute {
	if m != nil {
		return m.X509Certificates
	}
	return nil
}

func (m *User) GetEnterpriseExtension() *EnterpriseUserExtension {
	if m != nil {
		return m.EnterpriseExtension
	}
	return nil
}

// Metadata about the resource.
type ResourceMetadata struct {
	// The name of the resource type of the resource.  This attribute has a
	// mutability of "readOnly" and "caseExact" as "true".
	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// The DateTime the Resource was added to the Service Provider.
	Created string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// The most recent DateTime that the details of this resource were updated at
	// the service provider.  If this resource has never been modified since its
	// initial creation, the value MUST be the same as the value of "created".
	LastModified string `protobuf:"bytes,3,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// The URI of the resource being returned.  This value MUST be the same as
	// the "Content-Location" HTTP response header (see Section 3.1.4.2 of
	// [RFC7231]).
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// The version of the resource being returned.  This value must be the same
	// as the entity-tag (ETag) HTTP response header (see Sections 2.1 and 2.3 of
	// [RFC7232]).  This attribute has "caseExact" as "true".  Service provider
	// support for this attribute is optional and subject to the service
	// provider's support for versioning (see Section 3.14 of [RFC7644]).  If a
	// service provider provides "version" (entity-tag) for a
	// representation and the generation of that entity-tag does not
	// satisfy all of the characteristics of a strong validator (see
	// Section 2.1 of [RFC7232]), then the origin server MUST mark the
	// "version" (entity-tag) as weak by prefixing its opaque value
	// with "W/" (case sensitive).
	Version              string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceMetadata) Reset()         { *m = ResourceMetadata{} }
func (m *ResourceMetadata) String() string { return proto.CompactTextString(m) }
func (*ResourceMetadata) ProtoMessage()    {}
func (*ResourceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{1}
}

func (m *ResourceMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetadata.Unmarshal(m, b)
}
func (m *ResourceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetadata.Marshal(b, m, deterministic)
}
func (m *ResourceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetadata.Merge(m, src)
}
func (m *ResourceMetadata) XXX_Size() int {
	return xxx_messageInfo_ResourceMetadata.Size(m)
}
func (m *ResourceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetadata proto.InternalMessageInfo

func (m *ResourceMetadata) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ResourceMetadata) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *ResourceMetadata) GetLastModified() string {
	if m != nil {
		return m.LastModified
	}
	return ""
}

func (m *ResourceMetadata) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ResourceMetadata) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Name of the user.
type Name struct {
	// The full name, including all middle names, titles, and suffixes as
	// appropriate, formatted for display (e.g., "Ms. Barbara Jane Jensen, III").
	Formatted string `protobuf:"bytes,1,opt,name=formatted,proto3" json:"formatted,omitempty"`
	// The family name of the User, or "Last Name" in most Western languages (e.g.
	// Jensen given the full name Ms. Barbara Jane Jensen, III.).
	FamilyName string `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// The given name of the User, or "First Name" in most Western languages (e.g.
	// Barbara given the full name Ms. Barbara Jane Jensen, III.).
	GivenName string `protobuf:"bytes,3,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// The middle name(s) of the User (e.g., "Jane" given the full name
	// "Ms. Barbara Jane Jensen, III").
	MiddleName string `protobuf:"bytes,4,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	// The honorific prefix(es) of the User, or title in most Western languages
	// (e.g., "Ms." given the full name "Ms. Barbara Jane Jensen, III").
	HonorificPrefix string `protobuf:"bytes,5,opt,name=honorific_prefix,json=honorificPrefix,proto3" json:"honorific_prefix,omitempty"`
	// The honorific suffix(es) of the User, or suffix in most Western languages
	// (e.g., "III" given the full name "Ms. Barbara Jane Jensen, III").
	HonorificSuffix      string   `protobuf:"bytes,6,opt,name=honorific_suffix,json=honorificSuffix,proto3" json:"honorific_suffix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{2}
}

func (m *Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Name.Unmarshal(m, b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Name.Marshal(b, m, deterministic)
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return xxx_messageInfo_Name.Size(m)
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetFormatted() string {
	if m != nil {
		return m.Formatted
	}
	return ""
}

func (m *Name) GetFamilyName() string {
	if m != nil {
		return m.FamilyName
	}
	return ""
}

func (m *Name) GetGivenName() string {
	if m != nil {
		return m.GivenName
	}
	return ""
}

func (m *Name) GetMiddleName() string {
	if m != nil {
		return m.MiddleName
	}
	return ""
}

func (m *Name) GetHonorificPrefix() string {
	if m != nil {
		return m.HonorificPrefix
	}
	return ""
}

func (m *Name) GetHonorificSuffix() string {
	if m != nil {
		return m.HonorificSuffix
	}
	return ""
}

// Attribute encodes https://tools.ietf.org/html/rfc7643#section-2.4
type Attribute struct {
	// A label indicating the attribute's function, e.g., "work" or "home".
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A Boolean value indicating the 'primary' or preferred attribute
	// value for this attribute, e.g., the preferred mailing address or
	// the primary email address.  The primary attribute value "true"
	// MUST appear no more than once.  If not specified, the value of
	// "primary" SHALL be assumed to be "false".
	Primary bool `protobuf:"varint,2,opt,name=primary,proto3" json:"primary,omitempty"`
	// A human-readable name, primarily used for display purposes and
	// having a mutability of "immutable".
	Display string `protobuf:"bytes,3,opt,name=display,proto3" json:"display,omitempty"`
	// The attribute's significant value, e.g., email address, phone number.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// The reference URI of a target resource, if the attribute is a
	// reference.  URIs are canonicalized per Section 6.2 of [RFC3986].
	// While the representation of a resource may vary in different SCIM
	// protocol API versions (see Section 3.13 of [RFC7644]), URIs for
	// SCIM resources with an API version SHALL be considered comparable
	// to URIs without a version or with a different version.  For
	// example, "https://example.com/Users/12345" is equivalent to
	// "https://example.com/v2/Users/12345".
	Ref string `protobuf:"bytes,5,opt,name=ref,json=$ref,proto3" json:"ref,omitempty"`
	// CUSTOM EXTENSION. The attribute's value has been verified via a trusted
	// source or a trusted protocol as evidence that this attribute's value
	// belongs to the user.
	ExtensionVerified    bool     `protobuf:"varint,6,opt,name=extension_verified,json=verified,proto3" json:"extension_verified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{3}
}

func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribute.Unmarshal(m, b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return xxx_messageInfo_Attribute.Size(m)
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Attribute) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *Attribute) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Attribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Attribute) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Attribute) GetExtensionVerified() bool {
	if m != nil {
		return m.ExtensionVerified
	}
	return false
}

// A physical mailing address for this User.
type Address struct {
	// A label indicating the attribute's function, e.g., "work" or "home".
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A Boolean value indicating the 'primary' or preferred attribute
	// value for this attribute, e.g., the preferred mailing address or
	// the primary email address.  The primary attribute value "true"
	// MUST appear no more than once.  If not specified, the value of
	// "primary" SHALL be assumed to be "false".
	Primary bool `protobuf:"varint,2,opt,name=primary,proto3" json:"primary,omitempty"`
	// The reference URI of a target resource, if the attribute is a
	// reference.  URIs are canonicalized per Section 6.2 of [RFC3986].
	// While the representation of a resource may vary in different SCIM
	// protocol API versions (see Section 3.13 of [RFC7644]), URIs for
	// SCIM resources with an API version SHALL be considered comparable
	// to URIs without a version or with a different version.  For
	// example, "https://example.com/Users/12345" is equivalent to
	// "https://example.com/v2/Users/12345".
	Ref string `protobuf:"bytes,3,opt,name=ref,json=$ref,proto3" json:"ref,omitempty"`
	// The full mailing address, formatted for display or use
	// with a mailing label.  This attribute MAY contain newlines.
	Formatted string `protobuf:"bytes,4,opt,name=formatted,proto3" json:"formatted,omitempty"`
	// The full street address component, which may include house number, street
	// name, P.O. box, and multi-line extended street address information. This
	// attribute MAY contain newlines.
	StreetAddress string `protobuf:"bytes,5,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	// The city or locality component.
	Locality string `protobuf:"bytes,6,opt,name=locality,proto3" json:"locality,omitempty"`
	// The state or region component.
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// The zipcode or postal code component.
	PostalCode string `protobuf:"bytes,8,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// The country name component. When specified the value MUST be in ISO 3166-1
	// alpha 2 "short" code format; e.g., the United States and Sweden are "US"
	// and "SE", respectively.
	Country              string   `protobuf:"bytes,9,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{4}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Address) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *Address) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Address) GetFormatted() string {
	if m != nil {
		return m.Formatted
	}
	return ""
}

func (m *Address) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *Address) GetLocality() string {
	if m != nil {
		return m.Locality
	}
	return ""
}

func (m *Address) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

// This SCIM extension defines attributes commonly used in representing users
// that belong to, or act on behalf of a business or enterprise.
// See: https://tools.ietf.org/html/rfc7643#section-4.3
type EnterpriseUserExtension struct {
	// Numeric or alphanumeric identifier assigned to a person, typically based on
	// order of hire or association with an organization.
	EmployeeNumber string `protobuf:"bytes,1,opt,name=employee_number,json=employeeNumber,proto3" json:"employee_number,omitempty"`
	// Identifies the name of a cost center.
	CostCenter string `protobuf:"bytes,2,opt,name=cost_center,json=costCenter,proto3" json:"cost_center,omitempty"`
	// Identifies the name of an organization.
	Organization string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	// Identifies the name of a division.
	Division string `protobuf:"bytes,5,opt,name=division,proto3" json:"division,omitempty"`
	// Identifies the name of a department.
	Department string `protobuf:"bytes,6,opt,name=department,proto3" json:"department,omitempty"`
	// Represents organizational hierarchy by referencing another User.
	Manager              *Manager `protobuf:"bytes,7,opt,name=manager,proto3" json:"manager,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnterpriseUserExtension) Reset()         { *m = EnterpriseUserExtension{} }
func (m *EnterpriseUserExtension) String() string { return proto.CompactTextString(m) }
func (*EnterpriseUserExtension) ProtoMessage()    {}
func (*EnterpriseUserExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{5}
}

func (m *EnterpriseUserExtension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnterpriseUserExtension.Unmarshal(m, b)
}
func (m *EnterpriseUserExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnterpriseUserExtension.Marshal(b, m, deterministic)
}
func (m *EnterpriseUserExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterpriseUserExtension.Merge(m, src)
}
func (m *EnterpriseUserExtension) XXX_Size() int {
	return xxx_messageInfo_EnterpriseUserExtension.Size(m)
}
func (m *EnterpriseUserExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterpriseUserExtension.DiscardUnknown(m)
}

var xxx_messageInfo_EnterpriseUserExtension proto.InternalMessageInfo

func (m *EnterpriseUserExtension) GetEmployeeNumber() string {
	if m != nil {
		return m.EmployeeNumber
	}
	return ""
}

func (m *EnterpriseUserExtension) GetCostCenter() string {
	if m != nil {
		return m.CostCenter
	}
	return ""
}

func (m *EnterpriseUserExtension) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *EnterpriseUserExtension) GetDivision() string {
	if m != nil {
		return m.Division
	}
	return ""
}

func (m *EnterpriseUserExtension) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *EnterpriseUserExtension) GetManager() *Manager {
	if m != nil {
		return m.Manager
	}
	return nil
}

// A complex type that optionally allows service providers to represent
// organizational hierarchy by referencing the "id" attribute of another User.
type Manager struct {
	// The "id" of the SCIM resource representing the user's manager.
	// RECOMMENDED.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The URI of the SCIM resource representing the User's manager.  RECOMMENDED.
	Ref string `protobuf:"bytes,2,opt,name=ref,json=$ref,proto3" json:"ref,omitempty"`
	// The displayName of the user's manager.  This attribute is OPTIONAL, and
	// mutability is "readOnly".
	DisplayName          string   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Manager) Reset()         { *m = Manager{} }
func (m *Manager) String() string { return proto.CompactTextString(m) }
func (*Manager) ProtoMessage()    {}
func (*Manager) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{6}
}

func (m *Manager) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Manager.Unmarshal(m, b)
}
func (m *Manager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Manager.Marshal(b, m, deterministic)
}
func (m *Manager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager.Merge(m, src)
}
func (m *Manager) XXX_Size() int {
	return xxx_messageInfo_Manager.Size(m)
}
func (m *Manager) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager.DiscardUnknown(m)
}

var xxx_messageInfo_Manager proto.InternalMessageInfo

func (m *Manager) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Manager) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Manager) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// PATCH request operation as per
// https://tools.ietf.org/html/rfc7644#section-3.5.2.
type Patch struct {
	// The schemas attribute is an array of Strings which allows introspection of
	// the supported schema version for a SCIM representation as well any schema
	// extensions supported by that representation. Each String value must be a
	// unique URI. This specification defines URIs for User, Group, and a standard
	// "enterprise" extension. All representations of SCIM schema MUST include a
	// non-zero value array with value(s) of the URIs supported by that
	// representation. Duplicate values MUST NOT be included. Value order is not
	// specified and MUST not impact behavior. REQUIRED.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// A batch of operations to perform as part of a PATCH.
	Operations           []*Patch_Operation `protobuf:"bytes,2,rep,name=operations,json=Operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Patch) Reset()         { *m = Patch{} }
func (m *Patch) String() string { return proto.CompactTextString(m) }
func (*Patch) ProtoMessage()    {}
func (*Patch) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{7}
}

func (m *Patch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Patch.Unmarshal(m, b)
}
func (m *Patch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Patch.Marshal(b, m, deterministic)
}
func (m *Patch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patch.Merge(m, src)
}
func (m *Patch) XXX_Size() int {
	return xxx_messageInfo_Patch.Size(m)
}
func (m *Patch) XXX_DiscardUnknown() {
	xxx_messageInfo_Patch.DiscardUnknown(m)
}

var xxx_messageInfo_Patch proto.InternalMessageInfo

func (m *Patch) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *Patch) GetOperations() []*Patch_Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

// JavaScript Object Notation (JSON) Patch [RFC6902].
type Patch_Operation struct {
	// Operation objects MUST have exactly one "op" member, whose value
	// indicates the operation to perform.  Its value MUST be one of "add",
	// "remove", "replace", "move", "copy", or "test"; other values are
	// errors.
	Op string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// Objects MUST have exactly one "path" member. That member's value is a
	// string containing a JSON-Pointer value [RFC6901] that references a
	// location within the target document (the "target location") where the
	// operation is performed.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The value to patch related to the given operation and path. Not supplied
	// if operation is "remove".
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Patch_Operation) Reset()         { *m = Patch_Operation{} }
func (m *Patch_Operation) String() string { return proto.CompactTextString(m) }
func (*Patch_Operation) ProtoMessage()    {}
func (*Patch_Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{7, 0}
}

func (m *Patch_Operation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Patch_Operation.Unmarshal(m, b)
}
func (m *Patch_Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Patch_Operation.Marshal(b, m, deterministic)
}
func (m *Patch_Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patch_Operation.Merge(m, src)
}
func (m *Patch_Operation) XXX_Size() int {
	return xxx_messageInfo_Patch_Operation.Size(m)
}
func (m *Patch_Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Patch_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Patch_Operation proto.InternalMessageInfo

func (m *Patch_Operation) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Patch_Operation) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Patch_Operation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Response for ListUsers per https://tools.ietf.org/html/rfc7644#section-3.4.2
type ListUsersResponse struct {
	// List of SCIM User resources.
	Resources []*User `protobuf:"bytes,1,rep,name=resources,json=Resources,proto3" json:"resources,omitempty"`
	// Index of the first element of the page.
	StartIndex uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// Number of items in current page.
	ItemsPerPage uint32 `protobuf:"varint,3,opt,name=items_per_page,json=itemsPerPage,proto3" json:"items_per_page,omitempty"`
	// Number of results matched for this query.
	TotalResults uint32 `protobuf:"varint,4,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	// The schemas attribute is an array of Strings which allows introspection of
	// the supported schema version for a SCIM representation as well any schema
	// extensions supported by that representation. Each String value must be a
	// unique URI. This specification defines URIs for User, Group, and a standard
	// "enterprise" extension. All representations of SCIM schema MUST include a
	// non-zero value array with value(s) of the URIs supported by that
	// representation. Duplicate values MUST NOT be included. Value order is not
	// specified and MUST not impact behavior. REQUIRED.
	Schemas              []string `protobuf:"bytes,5,rep,name=schemas,proto3" json:"schemas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUsersResponse) Reset()         { *m = ListUsersResponse{} }
func (m *ListUsersResponse) String() string { return proto.CompactTextString(m) }
func (*ListUsersResponse) ProtoMessage()    {}
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fc69dcb8163414, []int{8}
}

func (m *ListUsersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUsersResponse.Unmarshal(m, b)
}
func (m *ListUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUsersResponse.Marshal(b, m, deterministic)
}
func (m *ListUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUsersResponse.Merge(m, src)
}
func (m *ListUsersResponse) XXX_Size() int {
	return xxx_messageInfo_ListUsersResponse.Size(m)
}
func (m *ListUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUsersResponse proto.InternalMessageInfo

func (m *ListUsersResponse) GetResources() []*User {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ListUsersResponse) GetStartIndex() uint32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *ListUsersResponse) GetItemsPerPage() uint32 {
	if m != nil {
		return m.ItemsPerPage
	}
	return 0
}

func (m *ListUsersResponse) GetTotalResults() uint32 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

func (m *ListUsersResponse) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "scim.v2.User")
	proto.RegisterType((*ResourceMetadata)(nil), "scim.v2.ResourceMetadata")
	proto.RegisterType((*Name)(nil), "scim.v2.Name")
	proto.RegisterType((*Attribute)(nil), "scim.v2.Attribute")
	proto.RegisterType((*Address)(nil), "scim.v2.Address")
	proto.RegisterType((*EnterpriseUserExtension)(nil), "scim.v2.EnterpriseUserExtension")
	proto.RegisterType((*Manager)(nil), "scim.v2.Manager")
	proto.RegisterType((*Patch)(nil), "scim.v2.Patch")
	proto.RegisterType((*Patch_Operation)(nil), "scim.v2.Patch.Operation")
	proto.RegisterType((*ListUsersResponse)(nil), "scim.v2.ListUsersResponse")
}

func init() { proto.RegisterFile("proto/scim/v2/users.proto", fileDescriptor_b3fc69dcb8163414) }

var fileDescriptor_b3fc69dcb8163414 = []byte{
	// 1225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0x97, 0x63, 0x27, 0xf6, 0x9e, 0xd8, 0x69, 0x32, 0xff, 0xfe, 0xdb, 0x69, 0x0b, 0x34, 0x75,
	0x83, 0x08, 0x45, 0x71, 0xaa, 0x20, 0xbe, 0x7c, 0x83, 0x20, 0xaa, 0x50, 0xa5, 0xb6, 0x84, 0x2d,
	0xbd, 0xe1, 0x66, 0x35, 0xd9, 0x3d, 0xb6, 0x47, 0xec, 0xee, 0xac, 0x66, 0x66, 0x4d, 0xdc, 0x77,
	0xe1, 0x86, 0x6b, 0x9e, 0x83, 0x97, 0xe0, 0x21, 0x78, 0x03, 0x84, 0xe6, 0x6b, 0xbd, 0x09, 0x18,
	0x89, 0xbb, 0x3d, 0xbf, 0xf3, 0x9b, 0xf3, 0x35, 0xe7, 0x9c, 0x1d, 0xb8, 0x57, 0x49, 0xa1, 0xc5,
	0xa9, 0x4a, 0x79, 0x71, 0xba, 0x3c, 0x3b, 0xad, 0x15, 0x4a, 0x35, 0xb1, 0x18, 0xe9, 0x1b, 0x70,
	0xb2, 0x3c, 0x1b, 0xff, 0x3c, 0x80, 0xde, 0x1b, 0x85, 0x92, 0x50, 0xe8, 0xab, 0x74, 0x81, 0x05,
	0x53, 0xb4, 0x73, 0xd8, 0x3d, 0x8e, 0xe2, 0x20, 0x92, 0x3d, 0xd8, 0xe2, 0x19, 0xdd, 0x3a, 0xec,
	0x1c, 0x47, 0xf1, 0x16, 0xcf, 0xc8, 0x43, 0xd8, 0xc5, 0x2b, 0x8d, 0xb2, 0x64, 0x79, 0xc2, 0x33,
	0xda, 0xb5, 0x0a, 0x08, 0xd0, 0xf3, 0x8c, 0x9c, 0x40, 0xaf, 0x40, 0xcd, 0x68, 0xef, 0xb0, 0x73,
	0xbc, 0x7b, 0x76, 0x6f, 0xe2, 0x7d, 0x4d, 0x62, 0x54, 0xa2, 0x96, 0x29, 0xbe, 0x44, 0xcd, 0x32,
	0xa6, 0x59, 0x6c, 0x69, 0xe4, 0x01, 0x44, 0x26, 0xb4, 0xa4, 0x64, 0x05, 0xd2, 0x6d, 0x6b, 0x6d,
	0x60, 0x80, 0x57, 0xac, 0x40, 0xf2, 0x08, 0x7a, 0x16, 0xdf, 0xb1, 0xb6, 0x46, 0x8d, 0x2d, 0xa3,
	0x8c, 0xad, 0x8a, 0x3c, 0x82, 0x61, 0xc6, 0x55, 0x95, 0xb3, 0x95, 0x33, 0xd1, 0xb7, 0x26, 0x76,
	0x3d, 0x66, 0xad, 0x3c, 0x80, 0xa8, 0xe4, 0xe9, 0x8f, 0x4e, 0x3f, 0x70, 0x2e, 0x0c, 0x60, 0x95,
	0x0f, 0x61, 0xb7, 0x92, 0x62, 0xc6, 0x73, 0x4c, 0x6a, 0x99, 0xd3, 0xc8, 0xe5, 0xe3, 0xa1, 0x37,
	0x32, 0x27, 0xb7, 0x61, 0x5b, 0x73, 0x9d, 0x23, 0x05, 0xab, 0x72, 0x42, 0x13, 0xb6, 0x5e, 0x55,
	0x48, 0x77, 0xd7, 0x61, 0x7f, 0xbf, 0xaa, 0x90, 0x9c, 0x00, 0xa9, 0x24, 0xce, 0x50, 0x4a, 0xcc,
	0x92, 0x9c, 0x95, 0xf3, 0x9a, 0xcd, 0x91, 0x0e, 0x2d, 0xeb, 0xa0, 0xd1, 0xbc, 0xf0, 0x0a, 0x72,
	0x07, 0x76, 0x72, 0x91, 0xb2, 0x1c, 0xe9, 0xc8, 0x52, 0xbc, 0x44, 0xee, 0xc3, 0x40, 0xf3, 0x02,
	0xdf, 0x8a, 0x12, 0xe9, 0x9e, 0x73, 0x11, 0x64, 0x73, 0x86, 0xa5, 0x9a, 0x2f, 0x91, 0xde, 0x3a,
	0xec, 0x1c, 0x0f, 0x62, 0x2f, 0x99, 0x33, 0x15, 0x53, 0xea, 0x27, 0x21, 0x33, 0xba, 0xef, 0xce,
	0x04, 0x99, 0x3c, 0x81, 0x1d, 0x2c, 0x18, 0xcf, 0x15, 0x3d, 0x38, 0xec, 0x1e, 0xef, 0x9e, 0x91,
	0xa6, 0x9e, 0x5f, 0x69, 0x2d, 0xf9, 0x65, 0xad, 0x31, 0xf6, 0x0c, 0xf2, 0x19, 0x8c, 0xaa, 0x85,
	0x28, 0x31, 0x29, 0xeb, 0xe2, 0x12, 0xa5, 0xa2, 0x64, 0xe3, 0x91, 0xa1, 0x25, 0xbe, 0x72, 0x3c,
	0x72, 0x04, 0x5d, 0x5e, 0x28, 0xfa, 0xbf, 0x8d, 0x74, 0xa3, 0x36, 0xa1, 0x54, 0x0b, 0xa1, 0x85,
	0xa2, 0xb7, 0x37, 0x87, 0xe2, 0x18, 0x64, 0x02, 0x11, 0xcb, 0x32, 0x89, 0x4a, 0xa1, 0xa2, 0xff,
	0xb7, 0xf4, 0xfd, 0x35, 0xdd, 0x69, 0xe2, 0x35, 0xc5, 0xd8, 0x9e, 0x4b, 0x51, 0x57, 0x8a, 0xde,
	0xd9, 0x6c, 0xdb, 0x31, 0xc8, 0xa7, 0x30, 0xc4, 0xd2, 0xde, 0x68, 0x81, 0xa5, 0x56, 0xf4, 0xee,
	0xe6, 0x2c, 0xdb, 0x3c, 0x72, 0x0c, 0xdb, 0x52, 0xe4, 0xa8, 0x28, 0xdd, 0x78, 0xc0, 0x11, 0xc8,
	0x97, 0x70, 0x70, 0xf5, 0xc9, 0xd3, 0x2f, 0x92, 0x14, 0xa5, 0xe6, 0x33, 0x9e, 0x32, 0x8d, 0x8a,
	0xde, 0xdb, 0x78, 0x6a, 0xdf, 0x90, 0xcf, 0x5b, 0x5c, 0xf2, 0x16, 0x6e, 0x63, 0xa9, 0x51, 0x56,
	0x92, 0x2b, 0x4c, 0xcc, 0xa0, 0x95, 0x8a, 0x8b, 0x92, 0xde, 0xb7, 0x33, 0x71, 0xd8, 0xd8, 0x78,
	0xd6, 0x90, 0xcc, 0x44, 0x3f, 0x0b, 0xbc, 0x78, 0x5a, 0xcb, 0x72, 0xca, 0x51, 0xcf, 0xa6, 0x15,
	0x93, 0xac, 0x50, 0x53, 0x73, 0x60, 0xea, 0xc7, 0x7b, 0xda, 0xd8, 0x9b, 0xae, 0x9d, 0x4c, 0xcf,
	0x26, 0x4f, 0xa7, 0xc6, 0xc8, 0xf8, 0xd7, 0x0e, 0xec, 0xdf, 0x9c, 0x5b, 0xf2, 0x18, 0x46, 0xd2,
	0x63, 0xae, 0xfd, 0x3b, 0xb6, 0xcf, 0x86, 0x01, 0xb4, 0x23, 0x40, 0xa1, 0x9f, 0x4a, 0x64, 0x1a,
	0xc3, 0xee, 0x08, 0xa2, 0x39, 0x9e, 0x33, 0xa5, 0x93, 0x42, 0x64, 0x7c, 0xc6, 0x31, 0xac, 0x90,
	0xa1, 0x01, 0x5f, 0x7a, 0xcc, 0xb4, 0xb1, 0x19, 0x02, 0x6d, 0x12, 0xed, 0xb9, 0x36, 0x0e, 0xb2,
	0x31, 0xbd, 0x44, 0x69, 0x6b, 0xe0, 0xf6, 0x45, 0x10, 0xc7, 0xbf, 0x77, 0xa0, 0x67, 0x87, 0xfa,
	0x1d, 0x88, 0x66, 0x42, 0x16, 0x4c, 0x1b, 0xff, 0x2e, 0xbc, 0x35, 0x60, 0x46, 0x7e, 0xc6, 0x0a,
	0x9e, 0xfb, 0x8d, 0xe1, 0xe2, 0x03, 0x07, 0xd9, 0xe3, 0xef, 0x02, 0xcc, 0xf9, 0x12, 0x4b, 0xa7,
	0x77, 0xf1, 0x45, 0x16, 0x09, 0x2b, 0xa3, 0xe0, 0x59, 0x96, 0xa3, 0xd3, 0xbb, 0xf8, 0xc0, 0x41,
	0x96, 0xf0, 0x21, 0xec, 0x2f, 0x44, 0x29, 0xa4, 0xb9, 0xc3, 0xc4, 0xcc, 0x3b, 0xbf, 0xf2, 0xa1,
	0xde, 0x6a, 0xf0, 0x0b, 0x0b, 0x5f, 0xa7, 0xaa, 0x7a, 0x66, 0xa8, 0x3b, 0x37, 0xa8, 0xaf, 0x2d,
	0x3c, 0xfe, 0xa5, 0x03, 0x51, 0xd3, 0x28, 0x84, 0x40, 0xaf, 0x55, 0x7c, 0xfb, 0x6d, 0x2a, 0x53,
	0x49, 0x5e, 0x30, 0xb9, 0xb2, 0x49, 0x0d, 0xe2, 0x20, 0x1a, 0x8d, 0xdf, 0x88, 0x3e, 0x9d, 0x20,
	0x9a, 0xf5, 0xb6, 0x64, 0x79, 0x1d, 0xd2, 0x70, 0x02, 0x39, 0x80, 0xae, 0xc4, 0x99, 0x0f, 0xba,
	0x77, 0x24, 0x71, 0x46, 0x8e, 0x80, 0x34, 0xcd, 0x92, 0x2c, 0x51, 0xba, 0xcb, 0xdb, 0xb1, 0x7e,
	0x06, 0x41, 0x1e, 0xff, 0xd9, 0x81, 0xbe, 0x9f, 0xc9, 0xff, 0x18, 0xa2, 0x77, 0xd9, 0x6d, 0xb9,
	0xbc, 0x76, 0x8d, 0xbd, 0x9b, 0xd7, 0xf8, 0x3e, 0xec, 0x29, 0x2d, 0x11, 0x75, 0xe2, 0x67, 0xdf,
	0x87, 0x3b, 0x72, 0x68, 0x88, 0xc2, 0xb7, 0x52, 0xce, 0xf5, 0xca, 0x57, 0xb6, 0x91, 0xcd, 0x16,
	0x95, 0x38, 0x37, 0x9d, 0xe4, 0x7e, 0x1b, 0x5e, 0xb2, 0x3f, 0x05, 0xa1, 0x34, 0xcb, 0x93, 0x54,
	0x64, 0xe1, 0x9f, 0x01, 0x0e, 0x3a, 0x17, 0x99, 0x6b, 0x6f, 0x51, 0x97, 0x5a, 0xae, 0xfc, 0x1f,
	0x23, 0x88, 0xe3, 0x3f, 0x3a, 0x70, 0x77, 0xc3, 0x28, 0x92, 0x0f, 0xe0, 0x16, 0x16, 0x55, 0x2e,
	0x56, 0x18, 0xf6, 0xaa, 0xaf, 0xcd, 0x5e, 0x80, 0xdd, 0x16, 0x35, 0xfe, 0x53, 0xa1, 0x74, 0x92,
	0xda, 0xa1, 0x0c, 0x1d, 0x6a, 0xa0, 0x73, 0x8b, 0x90, 0x31, 0x0c, 0x85, 0x9c, 0xb3, 0x92, 0xbf,
	0x75, 0x33, 0xe2, 0x67, 0xa8, 0x8d, 0x99, 0xc4, 0x33, 0xbe, 0xe4, 0xad, 0x41, 0x69, 0x64, 0xf2,
	0x1e, 0x40, 0x86, 0x15, 0x93, 0xda, 0xac, 0x33, 0x5f, 0x96, 0x16, 0x42, 0x9e, 0x40, 0xbf, 0x60,
	0x25, 0x9b, 0xa3, 0xb4, 0x95, 0x69, 0x6f, 0xdc, 0x97, 0x0e, 0x8f, 0x03, 0x61, 0xfc, 0x06, 0xfa,
	0x1e, 0x5b, 0x37, 0x53, 0xe7, 0x1f, 0x9a, 0x69, 0xab, 0x75, 0xb3, 0x37, 0xff, 0xda, 0xdd, 0xbf,
	0xfd, 0xb5, 0x4d, 0xbb, 0x6f, 0x5f, 0x30, 0x9d, 0x2e, 0xfe, 0xe5, 0x71, 0xf2, 0x39, 0x80, 0xa8,
	0x50, 0xda, 0x7c, 0x15, 0xdd, 0xb2, 0x5b, 0x95, 0x36, 0x91, 0xda, 0xd3, 0x93, 0x6f, 0x03, 0x21,
	0x86, 0xe6, 0x53, 0xdd, 0x7f, 0x06, 0x51, 0x23, 0x99, 0x37, 0x8e, 0xa8, 0x7c, 0xcc, 0x5b, 0xa2,
	0x32, 0x8d, 0x5b, 0x31, 0xbd, 0x08, 0x11, 0x9b, 0xef, 0x75, 0x6a, 0xdd, 0x56, 0x6a, 0xe3, 0xdf,
	0x3a, 0x70, 0xf0, 0x82, 0x2b, 0x6d, 0xee, 0x59, 0xc5, 0xa8, 0x2a, 0x51, 0x2a, 0x24, 0x1f, 0x41,
	0x14, 0x96, 0xa1, 0x0b, 0xb9, 0xfd, 0x76, 0x31, 0xd4, 0x38, 0x0a, 0x5b, 0x55, 0x99, 0xbb, 0x56,
	0x9a, 0x49, 0x9d, 0xf0, 0x32, 0xc3, 0x2b, 0xeb, 0x73, 0x14, 0x83, 0x85, 0x9e, 0x1b, 0x84, 0x1c,
	0xc1, 0x1e, 0xd7, 0x58, 0xa8, 0xa4, 0x42, 0x99, 0x54, 0xe6, 0x25, 0xd1, 0xb5, 0x9c, 0xa1, 0x45,
	0x2f, 0x50, 0x5e, 0x98, 0x47, 0xc4, 0x63, 0x18, 0x69, 0x61, 0x3a, 0x56, 0xa2, 0xaa, 0x73, 0xad,
	0xec, 0xbc, 0x8c, 0xe2, 0xa1, 0x05, 0x63, 0x87, 0xb5, 0x2b, 0xb9, 0x7d, 0xad, 0x92, 0x5f, 0xbf,
	0xfe, 0xe1, 0xbb, 0x39, 0xd7, 0x8b, 0xfa, 0x72, 0x92, 0x8a, 0xe2, 0xf4, 0x1b, 0x21, 0xe6, 0x39,
	0x9e, 0xe7, 0xa2, 0xce, 0x2e, 0x72, 0xa6, 0xcd, 0xcc, 0x9d, 0x2e, 0x90, 0xe5, 0x7a, 0x91, 0x32,
	0x89, 0x27, 0x33, 0xcc, 0x4c, 0xe9, 0x30, 0x3b, 0x61, 0x69, 0x8a, 0x4a, 0x9d, 0x28, 0x94, 0x4b,
	0x9e, 0xa2, 0x3a, 0xbd, 0xf6, 0xe6, 0xbc, 0xdc, 0xb1, 0xe2, 0xc7, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x50, 0x8f, 0x18, 0x29, 0x8b, 0x0a, 0x00, 0x00,
}
