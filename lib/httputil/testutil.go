// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package httputil

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"testing"
)

// DecodeRPCResp decodes the HTTP Response.Body JSON.
func DecodeRPCResp(resp *http.Response, v interface{}) error {
	b, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("ioutil.ReadAll(_) failed: %v", err)
	}
	if err := json.Unmarshal(b, v); err != nil {
		return fmt.Errorf("json.Unmarshal(%q,%T) failed: %v", b, v, err)
	}
	return nil
}

// MustDecodeRPCResp is the test helper for DecodeRPCResp.
func MustDecodeRPCResp(t *testing.T, resp *http.Response, v interface{}) {
	t.Helper()
	if err := DecodeRPCResp(resp, v); err != nil {
		t.Fatalf("httputil.DecodeRPCResp(%v, %T) failed: %v", resp, v, err)
	}
}

// FakeWriter is a fake HTTP response writer.
// See http.ResponseWriter.
type FakeWriter struct {
	Headers http.Header
	Body    []byte
	Code    int
}

// NewFakeWriter creates a new FakeWriter.
func NewFakeWriter() *FakeWriter {
	return &FakeWriter{Headers: make(http.Header)}
}

// Header returns the header.
func (w *FakeWriter) Header() http.Header {
	return w.Headers
}

// Write appends to the Body.
func (w *FakeWriter) Write(b []byte) (int, error) {
	w.Body = append(w.Body, b[:]...)
	return len(b), nil
}

// WriteHeader writes the HTTP status code.
func (w *FakeWriter) WriteHeader(code int) {
	w.Code = code
}

// RedirectHTMLPage retuns the HTML page generated by http.Redirect.
// This is copied from http package.
func RedirectHTMLPage(dst string) []byte {
	return []byte(`<a href="` + HTMLReplacer.Replace(dst) + `">Temporary Redirect</a>.` + "\n\n")
}

// HTMLReplacer escape URL parameters for HTML.
// This is copied from http package.
var HTMLReplacer = strings.NewReplacer(
	"&", "&amp;",
	"<", "&lt;",
	">", "&gt;",
	`"`, "&#34;",
	"'", "&#39;",
)
